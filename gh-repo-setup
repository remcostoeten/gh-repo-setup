#!/usr/bin/env bash
set -e

# gh-repo-setup - A GitHub CLI extension to setup repositories with custom defaults
# Author: Remco Stoeten

REPO_NAME=""
CURRENT_DIR=$(pwd)

# Function to show usage
show_usage() {
    echo "Usage: gh repo-setup [REPOSITORY_NAME]"
    echo ""
    echo "Setup a GitHub repository with custom defaults:"
    echo "  - Master as default branch"
    echo "  - Disabled: wikis, issues, projects, discussions"
    echo "  - Enabled: auto-merge, squash merge with PR title"
    echo "  - Auto-generated: README.md, MIT LICENSE"
    echo ""
    echo "Arguments:"
    echo "  REPOSITORY_NAME   Name of the repository (optional if run in existing repo)"
    echo ""
    echo "Examples:"
    echo "  gh repo-setup my-project      # Setup new repository"
    echo "  gh repo-setup                 # Setup current repository"
}

# Function to create README.md
create_readme() {
    local repo_name=$1
    if [ ! -f "README.md" ]; then
        echo "# ${repo_name}

## Description

Brief description of your project.

## Installation

\`\`\`bash
npm install # or your installation command
\`\`\`

## Usage

Add usage instructions here.

## License

MIT
" > README.md
        echo "‚úì Created README.md"
    else
        echo "‚úì README.md already exists"
    fi
}

# Function to create MIT LICENSE
create_license() {
    if [ ! -f "LICENSE" ]; then
        # Get current user and year
        local username=$(gh api user -q .login)
        local year=$(date +%Y)
        
        # Get MIT license template and replace placeholders
        gh api /licenses/mit -q .body | \
            sed "s/\[year\]/$year/g" | \
            sed "s/\[fullname\]/$username/g" > LICENSE
        
        echo "‚úì Created MIT LICENSE with $username ($year)"
    else
        echo "‚úì LICENSE already exists"
    fi
}

# Function to configure repository settings
configure_repo() {
    local repo_name=$1
    
    echo "‚öôÔ∏è  Configuring repository settings..."
    
    # Configure repository settings
    gh api --method PATCH "/repos/${repo_name}" \
        -f default_branch='master' \
        -f has_wiki=false \
        -f has_issues=false \
        -f has_projects=false \
        -f has_discussions=false \
        -f allow_squash_merge=true \
        -f allow_merge_commit=false \
        -f allow_rebase_merge=false \
        -f squash_merge_commit_title='PR_TITLE' \
        -f squash_merge_commit_message='PR_TITLE' \
        -f allow_auto_merge=true \
        -f delete_branch_on_merge=true
    
    echo "‚úì Repository settings configured"
}

# Parse arguments
if [ "$1" = "--help" ] || [ "$1" = "-h" ]; then
    show_usage
    exit 0
fi

if [ -n "$1" ]; then
    REPO_NAME="$1"
else
    # Try to get repository name from current directory
    if git rev-parse --git-dir > /dev/null 2>&1; then
        REPO_NAME=$(gh repo view --json nameWithOwner -q .nameWithOwner 2>/dev/null || echo "")
        if [ -z "$REPO_NAME" ]; then
            echo "‚ùå Could not determine repository name. Please provide repository name or run in a GitHub repository."
            exit 1
        fi
    else
        echo "‚ùå Not in a git repository. Please provide repository name or run in a GitHub repository."
        exit 1
    fi
fi

echo "üöÄ Setting up repository: $REPO_NAME"
echo ""

# Create files
repo_basename=$(basename "$REPO_NAME")
create_readme "$repo_basename"
create_license

# Configure repository
configure_repo "$REPO_NAME"

echo ""
echo "‚úÖ Repository setup complete!"
echo "üìù Don't forget to:"
echo "   1. Update README.md with your project details"
echo "   2. Commit and push the changes"
echo "   3. Set up branch protection if needed"
